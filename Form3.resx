<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AB/8AAAf/AAAH/wAAB/8AAAf/AAAP/wAAH8=
</value>
  </data>
</root>